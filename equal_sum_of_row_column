// Write a constraint to randomize a M x N array such that each element is unique and sum of each row and sum of each column is the same

localparam M = 4;
localparam N= 4;

rand bit [3:0] array [M][N];

constraint array_c {
  unique {array};
  foreach(array[m]) {
    m > 0 -> array[m].sum() == array[m-1].sum();
    foreach(array[,n]) {
      array.sum() with (int'(item[n])) == array[m].sum();
    }
  }
}

  rand int arr [M][N];
  rand int transpose_arr [N][M];
  
  constraint arr_unique_c {
    foreach(arr[i,j]) arr[i][j] inside {[0:M*N-1]};
    unique{arr};
  }

  constraint transpose_arr_unique_c {
    foreach(transpose_arr[i,j]) transpose_arr[i][j] inside {[0:M*N-1]};
  }
  
  constraint transpose_arr_c {
    foreach(arr[i,j]) arr[i][j] == transpose_arr[j][i];
  }
  
  constraint arr_sum_c {
    foreach(arr[i])
      (arr.sum() with (int'(item[i]))) == (transpose_arr.sum() with (int'(item[i])));
  }
  
  constraint arr_equal_sum_c {
    foreach(arr[i])
      i > 0 -> arr[i].sum() == arr[i-1].sum();
  }
